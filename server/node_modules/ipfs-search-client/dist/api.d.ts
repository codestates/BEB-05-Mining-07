/**
 * ipfs-search API
 * Search files and directories on the [Interplanetary Filesystem](https://ipfs.io/) through the [ipfs-search.com](https://ipfs-search.com) search API.
 *
 * OpenAPI spec version: 1.0.2
 * Contact: info@ipfs-search.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface Hash
 */
export interface Hash {
}
/**
 *
 * @export
 * @interface Metadata
 */
export interface Metadata {
    /**
     *
     * @type {any}
     * @memberof Metadata
     */
    metadata?: any;
    /**
     *
     * @type {number}
     * @memberof Metadata
     */
    version?: number;
    /**
     *
     * @type {Type}
     * @memberof Metadata
     */
    type?: Type;
}
/**
 *
 * @export
 * @interface Reference
 */
export interface Reference {
    /**
     *
     * @type {Hash}
     * @memberof Reference
     */
    parentHash?: Hash;
    /**
     *
     * @type {string}
     * @memberof Reference
     */
    name?: string;
}
/**
 *
 * @export
 * @interface SearchResult
 */
export interface SearchResult {
    /**
     *
     * @type {Hash}
     * @memberof SearchResult
     */
    hash?: Hash;
    /**
     *
     * @type {string}
     * @memberof SearchResult
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof SearchResult
     */
    description?: string;
    /**
     *
     * @type {Type}
     * @memberof SearchResult
     */
    type?: Type;
    /**
     *
     * @type {number}
     * @memberof SearchResult
     */
    size?: number;
    /**
     *
     * @type {string}
     * @memberof SearchResult
     */
    firstSeen?: string;
    /**
     *
     * @type {string}
     * @memberof SearchResult
     */
    lastSeen?: string;
    /**
     *
     * @type {number}
     * @memberof SearchResult
     */
    score?: number;
    /**
     *
     * @type {Array<Reference>}
     * @memberof SearchResult
     */
    references?: Array<Reference>;
    /**
     *
     * @type {string}
     * @memberof SearchResult
     */
    mimetype?: string;
}
/**
 *
 * @export
 * @interface SearchResultList
 */
export interface SearchResultList {
    /**
     *
     * @type {number}
     * @memberof SearchResultList
     */
    total?: number;
    /**
     *
     * @type {number}
     * @memberof SearchResultList
     */
    maxScore?: number;
    /**
     *
     * @type {Array<SearchResult>}
     * @memberof SearchResultList
     */
    hits?: Array<SearchResult>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Type {
    Any,
    File,
    Directory
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export declare const DefaultApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Hash} hash Content ID; IPLD [CID](https://specs.ipld.io/block-layer/CID.html).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadatahashGet(hash: Hash, options?: any): FetchArgs;
    /**
     * By default, the score for items with a more recent `last-seen` date are positively boosted while 'unnamed' items (without a `reference` or a `title`) are negatively boosted.
     * @summary Search for files and directories.
     * @param {string} q Search string query, based on Elasticsearch&#x27;s [Query string query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query) syntax.
     * @param {Type} [type] Resource type. Omit to return all types.
     * @param {number} [page] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchGet(q: string, type?: Type, page?: number, options?: any): FetchArgs;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Hash} hash Content ID; IPLD [CID](https://specs.ipld.io/block-layer/CID.html).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadatahashGet(hash: Hash, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Metadata>;
    /**
     * By default, the score for items with a more recent `last-seen` date are positively boosted while 'unnamed' items (without a `reference` or a `title`) are negatively boosted.
     * @summary Search for files and directories.
     * @param {string} q Search string query, based on Elasticsearch&#x27;s [Query string query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query) syntax.
     * @param {Type} [type] Resource type. Omit to return all types.
     * @param {number} [page] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchGet(q: string, type?: Type, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchResultList>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @param {Hash} hash Content ID; IPLD [CID](https://specs.ipld.io/block-layer/CID.html).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadatahashGet(hash: Hash, options?: any): Promise<Metadata>;
    /**
     * By default, the score for items with a more recent `last-seen` date are positively boosted while 'unnamed' items (without a `reference` or a `title`) are negatively boosted.
     * @summary Search for files and directories.
     * @param {string} q Search string query, based on Elasticsearch&#x27;s [Query string query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query) syntax.
     * @param {Type} [type] Resource type. Omit to return all types.
     * @param {number} [page] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchGet(q: string, type?: Type, page?: number, options?: any): Promise<SearchResultList>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @param {Hash} hash Content ID; IPLD [CID](https://specs.ipld.io/block-layer/CID.html).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    metadatahashGet(hash: Hash, options?: any): Promise<Metadata>;
    /**
     * By default, the score for items with a more recent `last-seen` date are positively boosted while 'unnamed' items (without a `reference` or a `title`) are negatively boosted.
     * @summary Search for files and directories.
     * @param {string} q Search string query, based on Elasticsearch&#x27;s [Query string query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query) syntax.
     * @param {Type} [type] Resource type. Omit to return all types.
     * @param {number} [page] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    searchGet(q: string, type?: Type, page?: number, options?: any): Promise<SearchResultList>;
}
