"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * ipfs-search API
 * Search files and directories on the [Interplanetary Filesystem](https://ipfs.io/) through the [ipfs-search.com](https://ipfs-search.com) search API.
 *
 * OpenAPI spec version: 1.0.2
 * Contact: info@ipfs-search.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiFetchParamCreator = exports.Type = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = void 0;
const url = require("url");
const cross_fetch_1 = require("cross-fetch");
const BASE_PATH = "https://api.ipfs-search.com/v1".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = cross_fetch_1.default) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
exports.RequiredError = RequiredError;
/**
 *
 * @export
 * @enum {string}
 */
var Type;
(function (Type) {
    Type[Type["Any"] = 'any'] = "Any";
    Type[Type["File"] = 'file'] = "File";
    Type[Type["Directory"] = 'directory'] = "Directory";
})(Type = exports.Type || (exports.Type = {}));
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
exports.DefaultApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {Hash} hash Content ID; IPLD [CID](https://specs.ipld.io/block-layer/CID.html).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatahashGet(hash, options = {}) {
            // verify required parameter 'hash' is not null or undefined
            if (hash === null || hash === undefined) {
                throw new RequiredError('hash', 'Required parameter hash was null or undefined when calling metadatahashGet.');
            }
            const localVarPath = `/metadata/${hash}/`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By default, the score for items with a more recent `last-seen` date are positively boosted while 'unnamed' items (without a `reference` or a `title`) are negatively boosted.
         * @summary Search for files and directories.
         * @param {string} q Search string query, based on Elasticsearch&#x27;s [Query string query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query) syntax.
         * @param {Type} [type] Resource type. Omit to return all types.
         * @param {number} [page] Page number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(q, type, page, options = {}) {
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new RequiredError('q', 'Required parameter q was null or undefined when calling searchGet.');
            }
            const localVarPath = `/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
exports.DefaultApiFp = function (configuration) {
    return {
        /**
         *
         * @param {Hash} hash Content ID; IPLD [CID](https://specs.ipld.io/block-layer/CID.html).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatahashGet(hash, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).metadatahashGet(hash, options);
            return (fetch = cross_fetch_1.default, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * By default, the score for items with a more recent `last-seen` date are positively boosted while 'unnamed' items (without a `reference` or a `title`) are negatively boosted.
         * @summary Search for files and directories.
         * @param {string} q Search string query, based on Elasticsearch&#x27;s [Query string query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query) syntax.
         * @param {Type} [type] Resource type. Omit to return all types.
         * @param {number} [page] Page number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(q, type, page, options) {
            const localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).searchGet(q, type, page, options);
            return (fetch = cross_fetch_1.default, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * DefaultApi - factory interface
 * @export
 */
exports.DefaultApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {Hash} hash Content ID; IPLD [CID](https://specs.ipld.io/block-layer/CID.html).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatahashGet(hash, options) {
            return exports.DefaultApiFp(configuration).metadatahashGet(hash, options)(fetch, basePath);
        },
        /**
         * By default, the score for items with a more recent `last-seen` date are positively boosted while 'unnamed' items (without a `reference` or a `title`) are negatively boosted.
         * @summary Search for files and directories.
         * @param {string} q Search string query, based on Elasticsearch&#x27;s [Query string query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query) syntax.
         * @param {Type} [type] Resource type. Omit to return all types.
         * @param {number} [page] Page number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(q, type, page, options) {
            return exports.DefaultApiFp(configuration).searchGet(q, type, page, options)(fetch, basePath);
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends BaseAPI {
    /**
     *
     * @param {Hash} hash Content ID; IPLD [CID](https://specs.ipld.io/block-layer/CID.html).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    metadatahashGet(hash, options) {
        return exports.DefaultApiFp(this.configuration).metadatahashGet(hash, options)(this.fetch, this.basePath);
    }
    /**
     * By default, the score for items with a more recent `last-seen` date are positively boosted while 'unnamed' items (without a `reference` or a `title`) are negatively boosted.
     * @summary Search for files and directories.
     * @param {string} q Search string query, based on Elasticsearch&#x27;s [Query string query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query) syntax.
     * @param {Type} [type] Resource type. Omit to return all types.
     * @param {number} [page] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    searchGet(q, type, page, options) {
        return exports.DefaultApiFp(this.configuration).searchGet(q, type, page, options)(this.fetch, this.basePath);
    }
}
exports.DefaultApi = DefaultApi;
