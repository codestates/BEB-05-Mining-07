{"ast":null,"code":"var _jsxFileName = \"/home/kbi/blockChain_part/bebpro_1/BEB-05-first-07/contract/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport erc721Abi from './erc721Abi';\nimport TokenList from './components/TokenList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nftCA = '0x3Ef39372bbd0B6eeF75180F1995bfaF20ccaA6e8';\n\nfunction App() {\n  _s();\n\n  const [account, setAccount] = useState('');\n  const [web3, setWeb3] = useState();\n  const [newErc721addr, setNewErc721Addr] = useState();\n  const [erc721list, setErc721list] = useState([]); // 자신의 NFT 정보를 저장할 토큰\n\n  useEffect(() => {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const web = new Web3(window.ethereum);\n        setWeb3(web);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, []);\n\n  const connectWallet = async () => {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    setAccount(accounts[0]);\n  };\n\n  const addNewErc721Token = async () => {\n    const tokenContract = await new web3.eth.Contract(erc721Abi, newErc721addr);\n    const name = await tokenContract.methods.name().call();\n    const symbol = await tokenContract.methods.symbol().call();\n    const totalSupply = await tokenContract.methods.totalSupply().call();\n    const arr = [];\n\n    for (let i = 1; i <= totalSupply; i++) {\n      arr.push(i);\n    }\n\n    for (let tokenId of arr) {\n      const tokenOwner = await tokenContract.methods.ownerOf(tokenId).call();\n\n      if (String(tokenOwner).toLowerCase() === account) {\n        const tokenURI = await tokenContract.methods.tokenURI(tokenId).call();\n        setErc721list(prevState => {\n          return [...prevState, {\n            name,\n            symbol,\n            tokenId,\n            tokenURI,\n            address: newErc721addr\n          }];\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"NFT Contract Address: \", nftCA]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"metaConnect\",\n      onClick: () => {\n        connectWallet();\n      },\n      children: \"Connect to MetaMask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userInfo\",\n      children: [\"\\uC8FC\\uC18C: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"newErc721\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => {\n          setNewErc721Addr(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewErc721Token,\n        children: \"add new erc721\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TokenList, {\n      web3: web3,\n      account: account,\n      erc721list: erc721list\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"n5Pgb2wlf7+/L4vwrduM28lOYjw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Web3","erc721Abi","TokenList","nftCA","App","account","setAccount","web3","setWeb3","newErc721addr","setNewErc721Addr","erc721list","setErc721list","window","ethereum","web","e","console","log","connectWallet","accounts","request","method","addNewErc721Token","tokenContract","eth","Contract","name","methods","call","symbol","totalSupply","arr","i","push","tokenId","tokenOwner","ownerOf","String","toLowerCase","tokenURI","prevState","address","target","value"],"sources":["/home/kbi/blockChain_part/bebpro_1/BEB-05-first-07/contract/src/App.js"],"sourcesContent":["import './App.css';\nimport {useEffect, useState} from 'react';\nimport Web3 from 'web3';\nimport erc721Abi from './erc721Abi';\nimport TokenList from './components/TokenList';\n\nconst nftCA = '0x3Ef39372bbd0B6eeF75180F1995bfaF20ccaA6e8';\n\nfunction App() {\n  const [account, setAccount] = useState('');\n  const [web3, setWeb3] = useState();\n  const [newErc721addr, setNewErc721Addr] = useState();\n  const [erc721list, setErc721list] = useState([]);  // 자신의 NFT 정보를 저장할 토큰\n\n  useEffect(() => {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const web = new Web3(window.ethereum);\n        setWeb3(web);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, []);\n\n  const connectWallet = async() => {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n    setAccount(accounts[0]);\n  };\n\n  const addNewErc721Token = async() => {\n    const tokenContract = await new web3.eth.Contract(\n      erc721Abi,\n      newErc721addr\n    );\n    const name = await tokenContract.methods.name().call();\n    const symbol = await tokenContract.methods.symbol().call();\n    const totalSupply = await tokenContract.methods.totalSupply().call();\n\n    const arr = [];\n    for (let i=1; i<= totalSupply; i++) {\n      arr.push(i)\n    }\n    for (let tokenId of arr) {\n      const tokenOwner = await tokenContract.methods.ownerOf(tokenId).call();\n      if (String(tokenOwner).toLowerCase() === account) {\n        const tokenURI = await tokenContract.methods.tokenURI(tokenId).call();\n        setErc721list((prevState) => {\n          return [...prevState, { name, symbol, tokenId, tokenURI, address: newErc721addr }];\n        });\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h4>NFT Contract Address: {nftCA}</h4>\n      <button className='metaConnect' onClick={() => {\n        connectWallet();\n      }}>\n        Connect to MetaMask\n      </button>\n      <div className='userInfo'>주소: {account}</div>\n      <div className=\"newErc721\">\n        <input type=\"text\" onChange={(e) => {\n          setNewErc721Addr(e.target.value);\n        }}\n        ></input>\n        <button onClick={addNewErc721Token}>add new erc721</button>\n      </div>\n      <TokenList web3={web3} account={account} erc721list={erc721list} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}